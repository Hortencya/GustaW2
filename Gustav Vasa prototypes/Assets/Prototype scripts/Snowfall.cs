using System.Collections;
using System.Collections.Generic;
using UnityEngine;
//this script is used to fill back the snowtracks on the splatmap
public class Snowfall : MonoBehaviour
{
    
    [SerializeField]
    private Shader snowfallShader;// snowfall shader earlier created
    private Material snowfallMat;// material that uses the snowfall material
    //private MeshRenderer renderer;// ref to mesh renderer
    private Material terrainRenderMat;// instead of meshrenderer use the terrains material property
    [Range(0.001f,0.1f)]
    public float flakeAmount;// public due to use of range feature which I think will collide with serializefield
    [Range(0.1f,1f)]
    public float flakeOpacity;// same as above

	// in start we create the reference variables needed for 
	void Start ()
    {
        terrainRenderMat = GetComponent<Terrain>().materialTemplate;// get the material template object from the terrain object snowfall is attached to
        snowfallMat = new Material(snowfallShader);
	}
	
	// update fills the snowtracks back using the information defined earlier in the snowflakes/snowfall shader
	void Update ()
    {
        // cast the values in the snowfall shader to the coresponding values of this script
        snowfallMat.SetFloat("_SnowflakeAmount", flakeAmount);
        snowfallMat.SetFloat("_FlakeOpacity", flakeOpacity);
        // this gets our splatmap that are generated by our other script that draw the tracks to the snow.
        // the splatmap 
        RenderTexture snow = (RenderTexture)terrainRenderMat.GetTexture("_Splat");
        //step 1: apply splatmap to temporary render texture
        RenderTexture temp = RenderTexture.GetTemporary(snow.width, snow.height,0,RenderTextureFormat.ARGBFloat);
        Graphics.Blit(snow, temp, snowfallMat);// draw splatmap over to temporary rendertexute using snowmaterial
        // put results of the temporary texture back to the original
        Graphics.Blit(temp, snow);
        terrainRenderMat.SetTexture("_Splat", snow);// sets splatmap to the snow rendertexture created above
        RenderTexture.ReleaseTemporary(temp);// release temporary rendertexture in order to save datapower.

	}
}
